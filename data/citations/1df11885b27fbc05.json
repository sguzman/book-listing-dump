[
  {
    "pages": [
      "859"
    ],
    "title": [
      "The eXtensible Application Markup Language (XAML"
    ],
    "type": null
  },
  {
    "pages": [
      "861"
    ],
    "title": [
      "The eXtensible Application Markup Language (XAML"
    ],
    "type": null
  },
  {
    "location": [
      "Page x"
    ],
    "note": [
      "IsTabStop=\"false\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\""
    ],
    "publisher": [
      "Class=\"MemoryTest.MainPage"
    ],
    "type": null,
    "url": [
      "http://schemas.microsoft.com/winfx/2006/xaml",
      "http://schemas.microsoft.com/expression/blend/2008",
      "http://schemas.openxmlformats.org/markup-compatibility/2006"
    ]
  },
  {
    "pages": [
      "863"
    ],
    "title": [
      "The eXtensible Application Markup Language (XAML"
    ],
    "type": null
  },
  {
    "note": [
      "like this: <Page xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"",
      "IsTabStop=\"false\" mc:Ignorable=\"d\" Loaded=\"Page_Loaded\">"
    ],
    "title": [
      "Add the Loaded property to the XAML for the Page element with the value as \"Page_Loaded\""
    ],
    "type": null,
    "url": [
      "http://schemas.microsoft.com/winfx/2006/xaml",
      "http://schemas.microsoft.com/expression/blend/2008",
      "http://schemas.openxmlformats.org/markup-compatibility/2006"
    ]
  },
  {
    "author": [
      {
        "literal": ""
      }
    ],
    "container-title": [
      "in assignment statements"
    ],
    "date": [
      "commas"
    ],
    "title": [
      "– arithmetic expressions"
    ],
    "type": "chapter"
  },
  {
    "note": [
      "613 declarations, using, 33–34 capture clauses, lambda expressions and, main() function, 34 593–594"
    ],
    "title": [
      "C++ program structure, 26–27 62–63 #include directive, 32–33 remainders, 61 automatically generated console sequence of, 65–66 programs, 37–39 variables, modifying, 61–62 comments and, 31–32 calculator program. See functions, creating console program structure, program using 26–27 calling conventions"
    ],
    "type": null
  },
  {
    "note": [
      "default destructors, 338–340 nested, 487–491 dynamic memory allocation and, operations on, 293–294 341–344 Pointers to Classes (example), 330–332 class keyword, 256, 292, 295 pointers to objects, 329–330 class templates, 382–392 private members of. See private class basics of, 382–383 members defi ned, 183 references to class objects, 329, 332–334 defi ning, 383–386 serializing element classes, 833–837 for function objects, 392 Sketcher program, 666–667 with multiple parameters, 390–392 static members, 326–329 objects, creating from, 386–389 vs. structs, 295"
    ],
    "pages": [
      "641–643"
    ],
    "title": [
      "circles (continued) element classes, defi ning, 715–718 design of game cards and, 880 in examples, 481 drawing, 699–701, 706–707, 727–728, 739 First Use of Classes (example), 296–298 class constructors friend classes. See friends Adding Constructor to CBox class to handle menu messages, 676 (example), 303–304 implementing, serialization and, basics of, 302–303 823–826, 829 default, 304–306 inheritance in. See inheritance default parameter values, 307–309 inline functions, 301–302 initialization lists as, 309 macros that add serialization to, 827 making explicit, 310–311 member function definitions, 300–301 class context menu (MFC), 644 member functions of, 298–300 class destructors MFC basic classes, 643–644 basics of, 338 MFC document template classes"
    ],
    "type": null
  },
  {
    "note": [
      "checking, 757–758 CreateElement() function, 735–736, continue statements, executing within 789–790 loops, 122–124 CreatePen() function, 701–702, 721, 722, control variables, 793 761–762 controls CreateWindow() function, 617–619 adding to dialog boxes, 777–779 Creating a Project for a Win32 Console basics of, 776–777 Application (example), 11–13"
    ],
    "title": [
      "basics of implementing, 754–756 Create() function Color menu and, 755–756 status bar panes and, 805 elements under cursors and, 760 windows class and, 633–634 items"
    ],
    "type": null
  },
  {
    "note": [
      "events 314–317 defi ned (Windows), 4 Function Arguments, Omitting, 242–243 in Windows applications, 609 Function Pointers, Passing, 240–241 examples, listed. See also functions, creating Function Templates, Using, 257–258 program using Functions, Using, 199–202 Abstract Classes, 478–481 Inheritance, More Than One Level of, Addition Operator, Exercising, 365–368 481–483 Arithmetic, Exercising Basic, 56–57 Inherited Functions, Using, 470–471"
    ],
    "title": [
      "event handling Efficient Object Copy Operations, card back events, 894–896 375–376 game control button events, 899–901 Empty Console Project, Creating, 16–19 shape events, 896–898 Enumerations, Using, 88–89 for UI elements (XAML), 870–871 Escape Sequences, Using, 54–55 event-driven programs Explicit Use of this, 319–321 defi ned, 4 Free Store, Using, 177–179 Windows programs as, 609 friend, Using to Calculate Surface Area"
    ],
    "type": null
  },
  {
    "author": [
      {
        "family": "Program",
        "given": "Simple"
      }
    ],
    "note": [
      "Stack Containers, Using, 560–561 672–674 Static Variables, Using in Functions, eXtensible Markup Language (XML), 863 227–228 extract() function, substrings and, Strings, Comparing, 429–432 275–277 Strings, Creating and Joining, 421–423 ExtTextOut() function, 815–816 structs, Using, 284–287 Throwing and Catching Exceptions, F 244–245 Vector Size and Capacity, Exploring, FALSE value, numeric type variables and, 46 513–516 fi le scope, 80–82 Windows API Program, Simple, files 630–631 application files (MemoryTest project), exceptions 871–872 basics of, 243–244 created by building console applications, 15"
    ],
    "title": [
      "27–31 executing Project for a Win32 Console Application, continue statements within loops, Creating, 11–13 122–124 Protected Members, Using, 458–460 for loops, 117–118 Queue Containers, Using, 551–553, MFC applications, 22–23 554–559 programs, 16 Receiving a Variable Number of projects and solutions, 16 Arguments, 218–220 Exercising Basic Arithmetic (example), 56–57 Receiving Command-Line Arguments, explicit type conversion, 60, 68–69 217–218 expr() function, 264–267 Recursion in Lambda Expressions, expressions 600–602 comparison operators and, 391–392 Recursive Functions, 228–231 decltype operator and, 258–260 References Returning, 224–226 evaluating, 264–267 References with Virtual Functions, Using, explicit type conversion and, 68 476–477 lvalues and rvalues and, 76–77 Returning Bad Pointers, 221–222 old-style casts and, 69 rvalue Reference Parameters, Using, types of, 70 214–216 extended if statements, 102–104 Scope Resolution Operator, 82–84 extending sizeof Operator, Using, 163–165 calculator program, 273–275 Sorting Words from Text, 436–441 menus for elements and colors"
    ],
    "type": null
  },
  {
    "container-title": [
      "modular structure, functions and, Windows data types and",
      "Windows API"
    ],
    "pages": [
      "606",
      "610 193–194"
    ],
    "title": [
      "SDI applications, creating, 645–649. See source code (example), 13–14 also MFC Application Wizard output strings, 424–428 views, 640–641 variables, 61–62 vs"
    ],
    "type": "article-journal",
    "volume": [
      "2"
    ]
  },
  {
    "note": [
      "715–718 program, running, 657–658 redrawing client area, 714–715 program, workings of, 658–659 WM_MOUSEMOVE message handler. See TextEditor project folder, 649–650 WM_MOUSEMOVE message handler view class, 656–657 mouse message handlers. See also WM_ viewing classes, 651–652 MOUSEMOVE message handler viewing project fi les, 651 basics of, 710–712 MFC Class Wizard, 806 basics of completing, 730–731 MFC drawing, 695–706 drawing mode, setting, 731–733 CDC class for, 697 elements, creating, 735–736 circles, 699–701 mouse, capturing, 739 in color. See MFC drawing in color OnMouseMove() handler, 733–735 graphics, displaying, 697–699 WM_LBUTTONUP messages, 736–737 OnDraw() function, 695–696 mouse programming for drawing, 708–737 sketch drawing, 737–740 basics of, 709–710 MFC drawing in color mouse for drawing. See mouse, using basics of, 701–703 for drawing; WM_MOUSEMOVE message brushes and, 704–706 handler"
    ],
    "title": [
      "MFC Application Wizard modules, creating executable (MFC), 657 creating MDI applications with, 659–661 mouse, using for drawing creating MFC applications with, basics of, 712–714 20–23, 644 CCircle class, 725–728 MFC Application Wizard output CCurve class, 728–730 application class, 652–653 CElement base class, 719–720 document class, 654–655 CLine class, 720–723 executable modules, creating, 657 CRectangle class, 723–725 frame window class, 653–654 element classes, defi ning"
    ],
    "type": null
  },
  {
    "container-title": [
      "See elements under globals"
    ],
    "note": [
      "variable defi nition, 41 references, using with, 476–477 vector containers Using an Inherited Function (example), accessing elements in, 516–517 470–471 capacity vs. size of, 511–516 virtual destructors, 483–486 creating, 508–511 virtual keyword, 471, 472, 485 vs. double-ended queue containers, 534 Visibility property, 871, 888–889, 896 inserting and deleting elements in, Volume() function 517–520 CBox class defi nition and, sorting elements of, 526–527 299–300, 313 storing class objects in, 520–526 CCan class and, 480 storing pointers in, 527–529 CCandyBox class, 451–454 vector<T> template, 506–508 CContainer class, 477–478 vector<CPoint> container, 728 function overriding and, 474–475"
    ],
    "pages": [
      "80–84",
      "80 , 477–478"
    ],
    "title": [
      "dynamic memory allocation and, 174 mouse cursor and",
      "cursors, identifying increment operators and, 63 scrolling views. See scrolling views initial values for, 41–42 updating, 746–748, 767 integer, 42–44 virtual destructors, 483–486 modifying in arithmetic operations, virtual Draw() function, 719 61–62 virtual functions naming, 39–40 abstract classes and, 478–481 of ref class types (C++/CX), 861 adding to classes, 300 scope and, 77–78 basics of, 468–470 sharing memory between, 346–349 correct operation of, 473 specific, capturing (lambda expressions), defi ned, 471–473 594–595 function overriding, preventing, static variables basics, 84 473–474 static variables in functions, 226–228 indirect base classes and, 481–483 storage duration and, 77–78 pointers to class objects, 474–476 variable declarations"
    ],
    "type": "article-journal",
    "volume": [
      "30",
      "35, 41"
    ]
  },
  {
    "genre": [
      "(MemoryTest project), 877,"
    ],
    "pages": [
      "880 470–471",
      "641–643 477–478"
    ],
    "title": [
      "VerticalAlignment property inherited functions and",
      "view class member function const and, menus, associating with, 756–757 322–323 MFC, 656–657 operator overloading and, 354–355 views protected class members and, 458–460 basics of, 640–641 virtual functions and, 471–473, linking to documents"
    ],
    "type": null
  },
  {
    "author": [
      {
        "given": "messages"
      }
    ],
    "container-title": [
      "MFC"
    ],
    "note": [
      "MFC Class Wizard, 806–807 notation in, 611–612 Win32 Application Wizard, 11 operating system and, 608–609 WM_ prefi x, for message IDs, Simple Windows API Program (example), 621, 668"
    ],
    "pages": [
      "606"
    ],
    "title": [
      "See Windows messages MFC Application Wizard, 20–23, MFC. See MFC (Microsoft Foundation 659–661. See also MFC Application Classes) Wizard output vs"
    ],
    "type": "article-journal",
    "volume": [
      "2"
    ]
  }
]
