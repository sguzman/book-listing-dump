[
  {
    "date": [
      "2019-05-01,210.520004,64827300,209.880005,215.309998,209.229996"
    ],
    "title": [
      "Here is a fragment of the input data file, data/quotes.csv: day,close,volume,open,high,low"
    ],
    "type": null
  },
  {
    "citation-number": [
      "2019-05-02,209.149994,31996300,209.839996,212.649994,208.130005"
    ],
    "type": null
  },
  {
    "citation-number": [
      "2019-05-03,211.75,20892400,210.889999,211.839996,210.229996"
    ],
    "type": null
  },
  {
    "citation-number": [
      "2019-05-06,208.479996,32443100,204.289993,208.839996,203.5"
    ],
    "type": null
  },
  {
    "citation-number": [
      "2019-05-07,202.860001,38763700,205.880005,207.419998,200.830002"
    ],
    "type": null
  },
  {
    "citation-number": [
      "2019-05-08,202.899994,26339500,201.899994,205.339996,201.75"
    ],
    "type": null
  },
  {
    "date": [
      "2019-05-09,200.720001,34908600,200.399994,201.679993,196.660004"
    ],
    "type": null
  },
  {
    "note": [
      "solving problems in GHCi REPL with 4–5 extensible exceptions 216–218 testing with Ord 33–34 throwing exceptions 218–219 testing with Random vs. programmable exceptions 209–210 generating random directions and turns GHC_PACKAGE_PATH environment variable 112"
    ],
    "title": [
      "benchmarking 311–316 getDataFileName function 323 defining and running 312–313 getFileStatus function 183 optimizing function and rerunning 315–316 gets function 147 reading and interpreting results 313–315 getSum field selector 146 from GHCi and string to GHC and text 6–7 getSymbolicLinkStatus function 183 functional programs as sets of IO actions 7–10 Getter operation 510 pure functions 10–17 GHC Core 308–309 computing most frequent words by sorting GHC runtime exceptions 216–222 them 13 catching exceptions 219–222 formatting reports 14–16 cleaning up after operations 220 IO actions and 17 recovery with try function 220–221 separating I/O from 10–12 with catch function and handle simple streaming 496–498 function 221–222"
    ],
    "type": null
  },
  {
    "title": [
      "components and implementation 481–493 Symbol operation 440, 446 functor general functions 489–492 symbolVal method 361, 444 generalizing elements to functorial synchronization 584–600 steps 484–486 mutable variables (MVars) and channels stream as free monad 487–488 585–592 stream as monad 486–487 channels 587–589 stream as result and functorial step 492–493 operations over 585–587 streams 482–484 potential deadlocks with 589–592"
    ],
    "type": null
  },
  {
    "container-title": [
      "up function"
    ],
    "note": [
      "up_list function 303–304 arithmetic expressions with 376–378 Update type 563 dynamically typed values with 373–376 updateEasy wrapper 564"
    ],
    "pages": [
      "467–468, 472 372–378"
    ],
    "title": [
      "types (continued) unitName function 350–351, 354 dealing with type errors 383–386 UnitName type class 352, 354–355 asking compiler 385–386 universum 106 explicitness about types 383–385 unix-compat external package 182 helping other users 386 unlifted types 290–291 dependent types 447–475 unlinesF function 16 example 448–452, 458–475 Unmasked 575 safety in Haskell programs 447–448 unpack function 96 substituting with singletons 452–457 UNPACK pragma 299 for Web API 436–447 Unsafe.Coerce 396 implementing from scratch 436–445 unsafeCast function 559 implementing with servant 445–447 unsafeCoerce function 367, 396 generalized algebraic data types (GADTs"
    ],
    "type": "article-journal",
    "volume": [
      "451"
    ]
  },
  {
    "title": [
      "web APIs 436–447 Writer monad 140–147, 181, 183, 189, 199 accessing 222–241 logging steps in greatest-common-divisor application components 225–233 computation 145–147 exception-handling strategies 233–241 transforming data file into SQL queries implementing from scratch 436–445 142–145 implementing routing with type classes WriterT monad transformer 189, 195, 200 442–445 writing data 502–504 introducing types 437–440 writing queries 562–564 programming with strings 436–437 manipulating values 563–564 specifying web interface with types 440–442 selecting values 562–563 implementing with servant 445–447 writing tests"
    ],
    "type": null
  }
]
