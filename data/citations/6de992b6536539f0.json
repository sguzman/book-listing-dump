[
  {
    "container-title": [
      "LIST.NEXT = LIST; LIST.PREVIOUS = LIST"
    ],
    "title": [
      "LIST = new LIST.ELEMENT"
    ],
    "type": "chapter"
  },
  {
    "author": [
      {
        "family": "REMOVE",
        "particle": "procedure"
      }
    ],
    "container-title": [
      "is begin P.PREVIOUS.NEXT := P.NEXT; P.NEXT.PREVIOUS := P.PREVIOUS; end REMOVE"
    ],
    "title": [
      ": in LINK"
    ],
    "type": "chapter"
  },
  {
    "author": [
      {
        "literal": "P.PREVIOUS.NEXT := P.NEXT"
      }
    ],
    "container-title": [
      "Correspondingly, the statement; P.NEXT.PREVIOUS := P.PREVIOUS"
    ],
    "title": [
      "means that the forward access value in the element in front of the target will point to the one after the target"
    ],
    "type": "chapter"
  },
  {
    "author": [
      {
        "family": "CHANGE_NAME",
        "given": "P.U.T."
      }
    ],
    "container-title": [
      "P.NAME_L); end CALLED; Objects 567 procedure CHANGE_NAME(P : in out PERSON; TO : STRING) Is L : NATURAL := NATURAL'MIN(TO'LENGTH, P.NAME'LENGTH); begin P.NAME(1 .. L):= TO(TO'FIRST .. TO'FIRST + L"
    ],
    "note": [
      "P.NAME_L := L; end CHANGE.NAME; end PERSON_PACKAGE;"
    ],
    "pages": [
      "â€“ 1"
    ],
    "title": [
      "The implementation of the operations are hidden, as usual, in the body of the package: package body PERSON_PACKAGE is function CALLED(P : PERSON)return STRING is begin return P.NAME(1"
    ],
    "type": "chapter"
  },
  {
    "author": [
      {
        "literal": "-"
      }
    ],
    "container-title": [
      "FILE_TYPE; ITEM: out ELEMENT_TYPE): procedure WRITE (FILE: In FILE.TYPE; ITEM: In ELEMENT_TYPE): function END_OF_FILE(FILE: In FILE_TYPE) return BOOLEAN; -- Exceptions STATUS_ERROR:exception renames IO_EXCEPTIONS.STATUS_ERROR; MODE.ERROR: exception renames IO_EXCEPTIONS.MODE_ERROR; NAME_ERROR: exception renames IO_EXCEPTIONS.NAME_ERROR; USE_ERROR: exception renames IO_EXCEPTIONS.USE_ERROR; DEVICE_ERROR: exception renames IO_EXCEPTIONS.DEVICE_ERROR"
    ],
    "note": [
      "END_ERROR: exception renames IO_EXCEPTIONS.END_ERROR; DATA_ERROR: exception renames IO_EXCEPTIONS.DATA_ERROR; private -- implementation-dependent end ADA.SEQUENTIAL_IO;"
    ],
    "title": [
      "Input and output operations procedure READ (FILE"
    ],
    "type": "chapter"
  }
]
