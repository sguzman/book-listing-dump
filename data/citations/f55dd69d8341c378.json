[
  {
    "title": [
      "parsing entries according applying functions across Dec 229–233 to 171–175 structure with 200–201 DecEq 233–234 sequencing expressions defining for State 335–340 empty type 228–229 guaranteeing equivalence of with Maybe using do data with 209–219 notation 177–180 G"
    ],
    "type": null
  },
  {
    "title": [
      "= type 218–219 updating 175–177 type-level functions 148–154 GameLoop type 251, 391, exactLength 210–211, type synonyms 149–150 399–402 216–218 using case expressions in expressing equality of Nats GameState 342–343 types 153–154 generic types, defining 95–100 as a type 211–212 with pattern matching"
    ],
    "type": null
  },
  {
    "note": [
      "_) 66, 83, 160 from 238–239, 241–244 148–154 Uninhabited interface 243 function 31–33 reversing 220–221 union types, defining 90–92 constrained 35–36 sorting 70–75 unsafeReceive 408–410 variables in 33–34 validating lengths 143–145 unsafeSend 408, 410 in Atom 61–64 updateGameState function 350 vending machine example numeric 27–28, 195–198 user-defined data types modeling vending machine security properties in defining 88–101 358"
    ],
    "title": [
      "defining type for game defining module 426–427 using 366–367 state 392–395 describing processes vectors 64–75 implementing game 412–415 appending 225–227 395–397 generic processes 422–426 automatic refining 69–70 running game 399–402 guaranteeing responses using state machine deciding membership of empty 228–229 and Inf 418–422 245–249 equality list processing example defining 104–107 decidability 229–234 empty type 228–229 427–429 guaranteeing a value is in guaranteeing equivalence making processes total 239–241 of data with 209–219 using Inf 415–418 indexing with bounded numreasoning about equality word-counting process bers using Fin 107–109 220–227 example 429–433 reading first-class 22–24 from console 139–140 defining functions with of unknown length U 140–141 variable numbers of arguments 155–161 refining type of allLengths unbound implicit arguments function 65–69 schemas 161–180 83–84 type-level functions removing elements underscore"
    ],
    "type": null
  }
]
